{"version":3,"sources":["views/Swap/lightning.png","views/Swap/tBTC.png","views/AlertDialog/AlertDialog.tsx","views/Footer/Footer.tsx","views/Swap/Swap.tsx","views/Operate/Operate.tsx","views/Widget/Widget.tsx","views/UserAddress/UserAddress.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Transition","React","forwardRef","props","ref","Slide","direction","AlertDialog","Dialog","open","TransitionComponent","keepMounted","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","children","DialogActions","Button","onClick","color","autoFocus","Footer","useState","dialog","setDialog","href","type","className","useStyles","makeStyles","theme","createStyles","root","margin","spacing","switchIcon","height","wideTextField","width","getLogoSize","ln","sharedInputProps","variant","InputLabelProps","shrink","BasicTextFields","classes","fromLN","setFromLN","fromAmount","setFromAmount","Grid","container","item","xs","noValidate","autoComplete","TextField","label","onChange","event","Number","target","value","inputProps","step","min","InputProps","endAdornment","InputAdornment","position","src","lnLogo","tbtcLogo","alt","undefined","readOnly","IconButton","aria-label","fontSize","web3","size","TabPanel","index","other","role","hidden","Box","p","Typography","component","a11yProps","backgroundColor","palette","background","paper","top","Widget","useTheme","setValue","connectWalletButton","connectWallet","AppBar","Tabs","newValue","indicatorColor","textColor","Tab","axis","onChangeIndex","dir","currentProvider","selectedAddress","App","setWeb3","walletError","setWalletError","window","ethereum","request","method","then","accounts","length","Web3","Error","enable","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.869628b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lightning.e641e8b5.png\";","module.exports = __webpack_public_path__ + \"static/media/tBTC.bc04593f.png\";","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialog(props: {\n  title: string;\n  children: React.ReactElement<any, any>;\n  open: boolean;\n  handleClose: () => void;\n}) {\n  return (\n    <Dialog\n      open={props.open}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={props.handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {props.children}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.handleClose} color=\"primary\" autoFocus>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport AlertDialog from \"../AlertDialog/AlertDialog\";\nimport \"./Footer.css\";\n\nexport default function Footer() {\n  const [dialog, setDialog] = React.useState<\"about\" | \"contact\" | null>(null);\n\n  const handleClose = () => {\n    setDialog(null);\n  };\n  const a = <>a</>;\n  return (\n    <footer>\n      <a href=\"https://github.com/corollari/ln2tBTC\">Code</a>&nbsp;·&nbsp;\n      <a href=\"https://github.com/corollari/ln2tBTC/blob/master/README.md\">\n        Docs\n      </a>\n      &nbsp;·&nbsp;\n      <button\n        type=\"button\"\n        className=\"link-button\"\n        onClick={() => setDialog(\"about\")}\n      >\n        About\n      </button>\n      &nbsp;·&nbsp;\n      <button\n        type=\"button\"\n        className=\"link-button\"\n        onClick={() => setDialog(\"contact\")}\n      >\n        Contact us\n      </button>\n      <AlertDialog\n        title={dialog === \"about\" ? \"About\" : \"Contact us\"}\n        open={dialog !== null}\n        handleClose={handleClose}\n      >\n        {dialog === \"about\" ? (\n          <>\n            LN2tBTC is a decentralized service that enables trustless swaps\n            between tBTC and BTC on the lightning network.\n            <br />\n            <br />\n            It is based on a protocol derived from submarine swaps and it's\n            served by a network of liquidity providers that anyone can join.\n            <br />\n            <br />\n            If you'd like to learn more about how everything works check out our{\" \"}\n            <a href=\"https://github.com/corollari/ln2tBTC/blob/master/README.md\">\n              our docs\n            </a>\n            .\n          </>\n        ) : (\n          <>\n            Just drop a message on{\" \"}\n            <a href=\"https://discord.com/channels/590951101600235531/681226760209432608/748490345217654786\">\n              Keep's discord\n            </a>{\" \"}\n            tagging me (@corollari#2127) or send me an email at\n            admin@ln2tbtc.com\n          </>\n        )}\n      </AlertDialog>\n    </footer>\n  );\n}\n","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport lnLogo from \"./lightning.png\";\nimport tbtcLogo from \"./tBTC.png\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Web3Provider } from \"../../ethereum\";\nimport \"./Swap.css\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n        //width: '25ch',\n      },\n    },\n    switchIcon: {\n      height: \"100%\",\n    },\n    wideTextField: {\n      width: \"100%\",\n    },\n  })\n);\n\nfunction getLogoSize(ln: boolean) {\n  return ln ? 20 : 30;\n}\n\nconst sharedInputProps = {\n  type: \"number\",\n  variant: \"outlined\" as const,\n  InputLabelProps: {\n    shrink: true,\n  },\n};\n\nexport default function BasicTextFields(props: { web3: Web3Provider }) {\n  const classes = useStyles();\n  const [fromLN, setFromLN] = React.useState(true);\n  const [fromAmount, setFromAmount] = React.useState<number | null>(null);\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={9}>\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n              label=\"From\"\n              {...sharedInputProps}\n              className={classes.wideTextField}\n              onChange={(event) => setFromAmount(Number(event.target.value))}\n              inputProps={{\n                step: 0.001,\n                min: 0,\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <img\n                      src={fromLN ? lnLogo : tbtcLogo}\n                      height={getLogoSize(fromLN)}\n                      alt=\"coin logo\"\n                    />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <TextField\n              label=\"To\"\n              {...sharedInputProps}\n              className={classes.wideTextField}\n              value={fromAmount === null ? undefined : fromAmount * 10}\n              InputProps={{\n                readOnly: true,\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <img\n                      src={fromLN ? tbtcLogo : lnLogo}\n                      height={getLogoSize(!fromLN)}\n                      alt=\"coin logo\"\n                    />\n                  </InputAdornment>\n                ),\n              }}\n              inputProps={{\n                step: 0.001,\n                min: 0,\n              }}\n            />\n          </form>\n        </Grid>\n        <Grid item xs={3}>\n          <IconButton\n            aria-label=\"switch\"\n            onClick={() => setFromLN(!fromLN)}\n            className={classes.switchIcon}\n          >\n            <SwapVertIcon fontSize=\"large\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n      {props.web3 === null ? undefined : (\n        <Button variant=\"contained\" color=\"primary\" size=\"large\">\n          Swap\n        </Button>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n/*\nimport TextField from \"@material-ui/core/TextField\";\nimport lnLogo from \"./lightning.png\";\nimport tbtcLogo from \"./tBTC.png\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Button from \"@material-ui/core/Button\";\n*/\nimport Grid from \"@material-ui/core/Grid\";\nimport { Web3Provider } from \"../../ethereum\";\n\nexport default function BasicTextFields(props: { web3: Web3Provider }) {\n  return props.web3 === null ? <></> : <Grid container spacing={3}></Grid>;\n}\n","import React from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { makeStyles, Theme, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Swap from \"../Swap/Swap\";\nimport Operate from \"../Operate/Operate\";\nimport { Web3Provider } from \"../../ethereum\";\nimport Button from \"@material-ui/core/Button\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  dir?: string;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography component={\"span\"}>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `full-width-tab-${index}`,\n    \"aria-controls\": `full-width-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: '100%',\n    'max-width': 500,\n    \"box-shadow\": \"0px 0px 16px 6px rgba(0, 0, 139, .4)\",\n    position:'absolute',\n    top: '20%'\n  },\n}));\n\nexport default function Widget(props: {\n  web3: Web3Provider;\n  connectWallet: () => void;\n}) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n\n  const connectWalletButton =\n    props.web3 !== null ? undefined : (\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={props.connectWallet}\n      >\n        Connect Wallet\n      </Button>\n    );\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Swap\" {...a11yProps(0)} />\n          <Tab label=\"Operate\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n          <Swap web3={props.web3} />\n          {connectWalletButton}\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n          <Operate web3={props.web3} />\n          {connectWalletButton}\n        </TabPanel>\n      </SwipeableViews>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Web3Provider } from \"../../ethereum\";\nimport \"./UserAddress.css\";\n\nexport default function BasicTextFields(props: { web3: Web3Provider }) {\n  return (\n    <div className=\"top-right\">\n      {props.web3 === null\n        ? \"\"\n        : (props.web3.currentProvider as any).selectedAddress}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Footer from \"./views/Footer/Footer\";\nimport Widget from \"./views/Widget/Widget\";\nimport UserAddress from \"./views/UserAddress/UserAddress\";\nimport AlertDialog from \"./views/AlertDialog/AlertDialog\";\nimport Web3 from \"web3\";\nimport { Web3Provider } from \"./ethereum\";\nimport \"./App.css\";\n\nfunction App() {\n  const [web3, setWeb3] = useState<Web3Provider>(null);\n  const [walletError, setWalletError] = useState<null | React.ReactElement<\n    any,\n    any\n  >>(null);\n  if (web3 === null) {\n    // Auto-login if the ethereum provider has already approved us before\n    window.ethereum?.request({ method: \"eth_accounts\" }).then((accounts) => {\n      if (accounts.length > 0) {\n        setWeb3(new Web3(window.ethereum as any));\n      }\n    });\n  }\n  const connectWallet = () => {\n    if (web3 !== null) {\n      throw new Error(\"Wallet already connected\");\n    }\n    if (window.ethereum === undefined) {\n      setWalletError(\n        <>\n          You must have MetaMask installed to use this product, get it{\" \"}\n          <a href=\"https://metamask.io/\">here</a>\n        </>\n      );\n      return;\n    }\n    window.ethereum\n      .enable()\n      .then(() => setWeb3(new Web3(window.ethereum as any)));\n  };\n  return (\n    <div className=\"App\">\n      <UserAddress web3={web3} />\n      <Widget {...{ web3, connectWallet }} />\n      <Footer />\n      <AlertDialog\n        title=\"Error\"\n        open={walletError !== null}\n        handleClose={() => setWalletError(null)}\n      >\n        {walletError ?? <>Good</>}\n      </AlertDialog>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}